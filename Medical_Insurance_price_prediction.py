# -*- coding: utf-8 -*-
"""DS_Case_Study.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/193jhYamqNgyN5s2_5yEUV8F-_r1Kw7Jy
"""

# Importing libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics
from sklearn.metrics import accuracy_score, mean_squared_error, r2_score

"""###**STEP 1: Data Collection**

"""

# loading the dataset from csv file to a Pandas Dataframe

insurance_data = pd.read_csv('/content/insurance.csv')
insurance_data.head ()

"""###**STEP 2: Data Analysis & Visualization**"""

# to check number of rows and columns
insurance_data.shape

# getting the information of the dataset
insurance_data.info()

"""Categirical Features:
*   sex/gender
*   smoker
*   region







"""

# checking for missing values
insurance_data.isnull().sum()

insurance_data.dropna()

"""Hence, we can see there are no null values present in the dataset"""

# statistical measures of the dataset
insurance_data.describe()

# Distribution of different age
plt.figure(figsize=(4,4))
plt.scatter(insurance_data['age'], insurance_data['charges'], color='blue')
plt.xlabel("Age(in years)")
plt.ylabel("Charges ($)")
plt.title("Age vs Charges")

insurance_data['sex'].value_counts()

# Count of male and female among the customers
# Define a custom color palette
custom_palette = ["red", "green"]
plt.figure(figsize=(4,4))
sns.countplot(x='sex', data=insurance_data, palette = custom_palette)
plt.title('Number of male and female customers')
plt.show()

# bmi distribution
plt.figure(figsize=(4,4))
sns.distplot(insurance_data['bmi'])
plt.title('BMI Distribution')
plt.show()

insurance_data['bmi'].value_counts()

# Number of people who have their children

plt.figure(figsize=(4,4))
sns.countplot(x='children', data=insurance_data)
plt.title('Children')
plt.show()

insurance_data['children'].value_counts()

"""Hence, we can see that there are more number of people who don't have any child.

That is, there are more than 500 people who don't have any child.
"""

# smoker column
plt.figure(figsize=(4,4))
sns.countplot(x='smoker', data=insurance_data)
plt.title('smoker')
plt.show()

insurance_data['smoker'].value_counts()

# region column
plt.figure(figsize=(4,4))
sns.countplot(x='region', data=insurance_data)
plt.title('region')
plt.show()

insurance_data['region'].value_counts()

# distribution of charges value
plt.figure(figsize=(4,4))
sns.histplot(insurance_data['charges'])
plt.title('Charges Distribution')
plt.show()

"""###STEP 3: DATA PREPROCESSING

####1) Encoding the categorical Features
"""

# encoding sex column
insurance_data.replace({'sex':{'male':0,'female':1}}, inplace=True)

# encoding 'smoker' column
insurance_data.replace({'smoker':{'yes':0,'no':1}}, inplace=True)

# encoding 'region' column
insurance_data.replace({'region':{'southeast':0,'southwest':1,'northeast':2,'northwest':3}}, inplace=True)

insurance_data.head()

# Checking for null values
insurance_data.isnull().sum()

"""####2) Splitting the Features and Target"""

X = insurance_data.drop(columns='charges', axis=1)
Y = insurance_data['charges']

print(X)

print(Y)

"""####3) Splitting the data into Training and Testing"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""###STEP 4: MODEL BUIDLING & TRAINING"""

# Buidling a Linear Regression Model

# loading the Linear Regression model
regressor = LinearRegression()
regressor.fit(X_train, Y_train)

"""###STEP 5: MODEL EVALUATION"""

# prediction on training data
training_data_prediction =regressor.predict(X_train)

# R squared value train data
r2_train = metrics.r2_score(Y_train, training_data_prediction)
print('R squared value : ', r2_train)

# prediction on test data
test_data_prediction =regressor.predict(X_test)

# R squared value for test data
r2_test = metrics.r2_score(Y_test, test_data_prediction)
print('R squared value : ', r2_test)

# Mean Squared Error
mse = mean_squared_error(Y_test, test_data_prediction)
print("Mean Squared Error:", mse)

r2 = r2_score(Y_test, test_data_prediction)
print("R-squared:", r2)

"""###STEP 6: BUILDING A PREDICTIVE SYSTEM"""

# Predict the class for new weight and size
print("THIS IS THE PREDICTIVE SYSTEM\nENTER YOUR DETAILS : ")
new_age = float(input("Enter your Age : "))
new_sex = input("Enter your Gender(male/female) : ")
new_bmi = float(input("Enter your BMI : "))
new_child = float(input("Enter number of children you have : "))
new_smoke = input("Are you smoker (yes/no) : ")
new_region = input("In which region do you stay(southeast, southwest, northeast, northwest) : ")

# Map user input to numerical values
new_sex = 0 if new_sex == 'male' else 1

new_smoke = 0 if new_smoke == 'yes' else 1

new_region = 1
if new_region == 0:
    region_name = "southeast"
elif new_region == 1:
    region_name = "southwest"
elif new_region == 2:
    region_name = "northeast"
else :
  region_name = "northwest"

# changing input_data to a numpy array
new_class = np.array([[new_age, new_sex, new_bmi, new_child, new_smoke, new_region]])

# reshape the array
input_data_reshaped = new_class.reshape(1,-1)
prediction = regressor.predict(input_data_reshaped)
print('The insurance cost is : $', prediction[0])

import pickle

with open('model.pkl', 'wb') as model_file:
    pickle.dump(regressor, model_file)

with open('model.pkl', 'rb') as model_file:
    loaded_model = pickle.load(model_file)